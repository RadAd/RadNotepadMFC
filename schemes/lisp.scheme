<?xml version="1.0" encoding="UTF-8"?>
<Scheme>
	<keyword-classes><keyword-class name="lisp">not defun + - * / = &lt; &gt; &lt;= &gt;= princ
eval apply funcall quote identity function complement backquote lambda set setq setf
defun defmacro gensym make symbol intern symbol name symbol value symbol plist get
getf putprop remprop hash make array aref car cdr caar cadr cdar cddr caaar caadr cadar
caddr cdaar cdadr cddar cdddr caaaar caaadr caadar caaddr cadaar cadadr caddar cadddr
cdaaar cdaadr cdadar cdaddr cddaar cddadr cdddar cddddr cons list append reverse last nth
nthcdr member assoc subst sublis nsubst  nsublis remove length list length
mapc mapcar mapl maplist mapcan mapcon rplaca rplacd nconc delete atom symbolp numberp
boundp null listp consp minusp zerop plusp evenp oddp eq eql equal cond case and or let l if prog
prog1 prog2 progn go return do dolist dotimes catch throw error cerror break
continue errset baktrace evalhook truncate float rem min max abs sin cos tan expt exp sqrt
random logand logior logxor lognot bignums logeqv lognand lognor
logorc2 logtest logbitp logcount integer length nil</keyword-class>
	<keyword-class name="scheme"> + - * / = &lt; &gt; &lt;= &gt;= =&gt;
abs acos and angle append apply asin assoc assoc assq assv atan
begin boolean?
caar cadr call-with-current-continuation call/cc
call-with-input-file call-with-output-file call-with-values
car cdr
caar cadr cdar cddr
caaar caadr cadar caddr cdaar cdadr cddar cdddr
caaaar caaadr caadar caaddr cadaar cadadr caddar cadddr
cdaaar cdaadr cdadar cdaddr cddaar cddadr cdddar cddddr
case ceiling char->integer
char-alphabetic? char-ci&lt;=? char-ci&lt;? char-ci=? char-ci&gt;=? char-ci&gt;?
char-downcase char-lower-case? char-numeric? char-ready?
char-upcase char-upper-case? char-whitespace?
char&lt;=? char&lt;? char=? char&gt;=? char&gt;? char?
close-input-port close-output-port complex? cond cons cos
current-input-port current-output-port
define define-syntax delay denominator display do dynamic-wind
else eof-object? eq? equal? eqv? eval even? exact-&gt;inexact exact?
exp expt
floor for-each force
gcd
if imag-part inexact-&gt;exact inexact? input-port? integer-&gt;char integer? interaction-environment
lambda lcm length let let* let-syntax letrec letrec-syntax
list list-&gt;string list-&gt;vector list-ref list-tail list? load log
magnitude make-polar make-rectangular make-string make-vector
map max member memq memv min modulo
negative? newline not null-environment null? number-&gt;string number? numerator
odd? open-input-file open-output-file or output-port?
pair? peek-char input-port? output-port? positive? procedure?
quasiquote quote quotient
rational? rationalize read read-char real-part real? remainder reverse round
scheme-report-environment set! set-car! set-cdr! sin sqrt string
string-&gt;list string-&gt;number string-&gt;symbol string-append
string-ci&lt;=? string-ci&lt;? string-ci=? string-ci&gt;=? string-ci&gt;?
string-copy string-fill! string-length string-ref string-set!
string&lt;=? string&lt;? string=? string&gt;=? string&gt;? string?
substring symbol-&gt;string symbol? syntax-rules
transcript-off transcript-on truncate
unquote unquote-splicing
values vector vector-&gt;list vector-fill! vector-length vector-ref vector-set! vector?
with-input-from-file with-output-to-file write write-char
zero?</keyword-class></keyword-classes>
	<base-language name="lispbase">
		<use-styles>
			<style name="Default" key="32" />
			<style name="Whitespace" key="0" />
			<style name="Comment" key="1" class="comment" />
			<style name="Number" key="2" class="number"/>
			<style name="Keywords" key="3" class="keyword"/>
			<style name="String" key="6" class="string"/>
			<style name="End of line string" key="8" class="unclosedstring"/>
			<style name="Identifier" key="9" class="identifier"/>
			<style name="Operator" key="10" class="operator"/>
		</use-styles>
	</base-language>
	<language name="lisp" base="lispbase" title="Lisp" folding="true" wordchars="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-&lt;&gt;.#+@$%^&amp;=*!?">
		<lexer name="lisp"/>
		<comments line=";" />
		<use-keywords>
			<keyword key="0" name="Keywords" class="lisp" />
		</use-keywords>
	</language>
	<language name="scheme" base="lispbase" title="Scheme" folding="true" wordchars="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!$%&amp;*/:&lt;=&gt;?^_~+-.@">
		<lexer name="lisp" />
		<comments line=";" />
		<use-keywords>
			<keyword key="0" name="Keywords" class="scheme" />
		</use-keywords>
	</language>
</Scheme>